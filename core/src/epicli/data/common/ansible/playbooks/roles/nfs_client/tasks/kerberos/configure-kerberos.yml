---
# krb5.conf is the same for Kerberos server and clients
# Copy it from Kubernetes server because Jinja template uses ansible_fqdn
- name: Copy /etc/krb5.conf from Kerberos server
  block:
    - name: Load /etc/krb5.conf from Kerberos server
      delegate_to: "{{ kerberos_server }}"
      run_once: yes
      slurp:
        src: /etc/krb5.conf
      register: slurp_krb5_conf

    - name: Copy /etc/krb5.conf
      copy:
        content: "{{ slurp_krb5_conf.content | b64decode }}"
        dest: /etc/krb5.conf
        owner: root
        group: root
        mode: u=rw,go=r
        backup: yes

- name: Get Kerberos realm from Kerberos server
  delegate_to: "{{ kerberos_server }}"
  run_once: yes
  shell: |-
    set -euo pipefail
    # Get default_realm
    source <(grep 'default_realm\s*=' /etc/krb5.conf | sed 's/\s*=\s*/=/g')
    echo $default_realm
  args:
    executable: /bin/bash
  register: get_default_realm
  changed_when: false
  failed_when: get_default_realm.rc != 0
            or get_default_realm.stdout == ""

- name: Set Kerberos realm as fact
  set_fact:
    kerberos_realm: "{{ get_default_realm.stdout }}"

# Red Hat's recommendation is to configure both NFS clients and NFS servers to use nfs service principals
# to ensure maximum functionality of the NFSv4 protocol.
- name: Create service principals for NFS clients on Kerberos server
  delegate_to: "{{ kerberos_server }}"
  run_once: yes
  block:
    - name: Create Kerberos principals for NFS clients
      include_tasks: roles/nfs_server/tasks/kerberos/create-principals.yml

    # TODO: check if this task is needed
    - name: Add principals to keytab file on Kerberos server
      include_tasks: roles/nfs_server/tasks/kerberos/add-principals-to-default-keytab.yml
  vars:
    fqdn_hosts: "{{ ansible_play_hosts | map('extract', hostvars, ['ansible_fqdn']) | select('defined') | list }}"
    principals: "{{ ['nfs'] | product(fqdn_hosts) | map('join', '/') | list }}"

# NFS client will search keytab file for a key to use in specific order (see rpc.gssd man page).
# Use dedicated keytab (/etc/krb5_nfs_client.keytab) containing only nfs principal to ensure that rpc.gssd will use it.
- name: Create /etc/krb5_nfs_client.keytab
  block:
    - name: Check if NFS service principal is already in keytab
      shell: >-
        klist -k -t /etc/krb5_nfs_client.keytab | grep --word-regexp --only-match "{{ principal }}@{{ kerberos_realm }}"
      args:
        executable: /bin/bash
      register: grep_client_keytab
      changed_when: false
      failed_when:
        - grep_client_keytab.rc != 0
        - grep_client_keytab.stderr_lines or grep_client_keytab.stdout_lines
        - grep_client_keytab.stderr is not search("file .*keytab.* not found")

    - name: Copy keytab file from Kerberos server
      when: grep_client_keytab.stdout == ""
      delegate_to: "{{ kerberos_server }}"
      block:
        # This task overwrites existing keytab so use /tmp directory
        - name: Generate keytab file for NFS client on Kerberos server
          shell: |
            ! test -f "{{ tmp_keytab_path }}" || rm -f "{{ tmp_keytab_path }}"
            kadmin.local -q "ktadd -norandkey -k {{ tmp_keytab_path }} {{ principal }}" -r {{ kerberos_realm }}

        - name: Load keytab file from Kerberos server
          slurp:
            src: "{{ tmp_keytab_path }}"
          register: slurp_nfs_client_keytab

        - name: Remove temporary keytab file on Kerberos server
          file:
            path: "{{ tmp_keytab_path }}"
            state: absent
      vars:
        tmp_keytab_path: /tmp/krb5_{{ principal | replace('/','_') }}.keytab

    - name: Create /etc/krb5_nfs_client.keytab file
      copy:
        dest: /etc/krb5_nfs_client.keytab
        content: "{{ slurp_nfs_client_keytab.content | b64decode }}"
        owner: root
        group: root
        mode: u=rw,go=
      when: grep_client_keytab.stdout == ""
  vars:
    principal: nfs/{{ ansible_fqdn }}
