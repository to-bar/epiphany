---
- name: Install Kerberos server
  include_tasks: kerberos/install-kerberos.yml

- name: Configure Kerberos server
  include_tasks: kerberos/configure-kerberos.yml
  vars:
    kerberos_realm: "{{ ansible_domain | upper }}"

- name: Copy exports file
  template:
    src: exports.j2
    dest: /etc/exports
    owner: root
    group: root
    mode: u=rw,go=r
    backup: yes

- name: Create directories to be exported if don't exist
  block:
    - name: Check if directories to be exported exist
      stat:
        path: "{{ item.directory }}"
        get_attributes: no
        get_checksum: no
        get_mime: no
      register: nfs_export_dirs_stat
      loop: "{{ enabled_exports }}"
      loop_control:
        label: "{{ item.directory }}"

    - name: Create directories to be exported if don't exist
      file:
        path: "{{ item.directory }}"
        state: directory
        owner: "{{ nfs.anonymous.user[ansible_os_family] }}"
        group: "{{ nfs.anonymous.group[ansible_os_family] }}"
      when:
        - nfs_export_dirs_stat.results[ansible_loop.index0].stat.isdir is undefined
          or not nfs_export_dirs_stat.results[ansible_loop.index0].stat.isdir
      loop: "{{ enabled_exports }}"
      loop_control:
        extended: yes
        label: "{{ item.directory }}"
  vars:
    enabled_exports: >-
      {{ specification.nfs_exports | selectattr('enabled', 'undefined') | list +
         specification.nfs_exports | selectattr('enabled', 'defined')
                                   | rejectattr("enabled", "equalto", False) | list }}

# Disable NFSv2 and NFSv3 to minimize number of open ports since NFSv4 does not require rpcbind service
# RHEL: https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/storage_administration_guide/nfs-serverconfig#nfs4-only
# Debian: https://wiki.debian.org/NFSServerSetup
- name: Disable NFSv2 and NFSv3
  block:
    - name: Configure NFS server to not support NFSv2 and NFSv3
      blockinfile:
        path: "{{ nfs.paths.nfs_server_config_file[ansible_os_family] }}"
        marker: "\n# {mark} ANSIBLE MANAGED BLOCK: Disable NFSv2 and NFSv3"
        block: "{{ block[ansible_os_family] }}"
        backup: yes
      register: configure_nfs_server_vars
      vars:
        block:
          Debian: |
            RPCNFSDOPTS="-N 2 -N 3 -U"
            RPCMOUNTDOPTS="--manage-gids -N 2 -N 3"
          RedHat: |
            RPCNFSDARGS="-N 2 -N 3 -U"
            RPCMOUNTDOPTS="-N 2 -N 3"

    - name: Mask units not needed by NFSv4
      systemd:
        name: "{{ item }}"
        state: stopped
        masked: yes
      register: mask_nfs_v3_units
      loop:
        - rpc-statd.service
        - rpcbind.service
        - rpcbind.socket

    - name: Restart NFS service
      systemd:
        name: "{{ nfs.service[ansible_os_family] }}"
        state: restarted
      when: configure_nfs_server_vars.changed
         or mask_nfs_v3_units.changed

# rpc.svcgssd has been deprecated since RHEL 7.0 and its use in new deployments is discouraged in favor of gssproxy.
# Ubuntu 18.04 still uses rpc.svcgssd. We want to have gssproxy for both distros.
- name: Disable rpc-svcgssd service
  systemd:
    name: rpc-svcgssd
    state: stopped
    enabled: no
    masked: yes
  when: ansible_os_family == 'Debian'

- name: Start gssproxy service
  systemd:
    name: gssproxy
    state: started
  register: start_gssproxy

- name: Adjust rpc-gssd service on Ubuntu
  when: ansible_os_family == 'Debian'
  block:
    - name: Configure rpc-gssd service to start after gssproxy service
      lineinfile:
        path: /lib/systemd/system/rpc-gssd.service
        line: After=gssproxy.service
        insertafter: '^After='
        backup: yes
      register: configure_rpc_gssd_unit

    - name: Run daemon-reload
      # command module used by purpose since systemd module does not set changed=true for daemon-reload
      command: systemctl daemon-reload
      register: reload_rpc_gssd_unit
      when: configure_rpc_gssd_unit.changed

- name: Restart rpc-gssd service
  systemd:
    name: rpc-gssd
    state: restarted
  when: reload_rpc_gssd_unit.changed
     or start_gssproxy.changed

- name: Start service
  systemd:
    name: "{{ item }}"
    state: started
  loop:
    - rpc-gssd
    - "{{ nfs.service[ansible_os_family] }}"

- name: Enable services
  systemd:
    name: "{{ item }}"
    enabled: yes
  loop:
    - gssproxy
    - rpc-gssd
    - "{{ nfs.service[ansible_os_family] }}"

- name: Export all entries from /etc/exports
  command: exportfs -rav
