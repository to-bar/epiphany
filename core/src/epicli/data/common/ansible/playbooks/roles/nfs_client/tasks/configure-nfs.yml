---
- name: Install Kerberos client
  include_tasks: kerberos/install-kerberos.yml

- name: Configure Kerberos client
  include_tasks: kerberos/configure-kerberos.yml
  vars:
    kerberos_server: "{{ specification.nfs_server_host }}"

# rpc.svcgssd has been deprecated since RHEL 7.0 and its use in new deployments is discouraged in favor of gssproxy.
# Ubuntu 18.04 still uses rpc.svcgssd. We want to have gssproxy for both distros.
- name: Disable rpc-svcgssd service
  systemd:
    name: rpc-svcgssd
    state: stopped
    enabled: no
    masked: yes
  when: ansible_os_family == 'Debian'

- name: Copy gssproxy config file (99-nfs-client.conf)
  copy:
    dest: /etc/gssproxy/99-nfs-client.conf
    src: 99-nfs-client.conf
    owner: root
    group: root
    mode: u=rw,go=
    backup: yes
  register: copy_gssproxy_config

- name: Restart gssproxy service
  systemd:
    name: gssproxy
    state: restarted
  notify: Restart rpc-gssd service
  when: copy_gssproxy_config.changed

- name: Configure rpc-gssd service
  block:
    - name: Configure rpc-gssd service to start after gssproxy service
      lineinfile:
        path: /lib/systemd/system/rpc-gssd.service
        line: After=gssproxy.service
        insertafter: '^After='
        backup: yes
      register: configure_rpc_gssd_unit_1
      when: ansible_os_family == 'Debian'

    - name: Configure rpc-gssd service to look for keytab in custom location
      lineinfile:
        path: /lib/systemd/system/rpc-gssd.service
        regexp: '^ConditionPathExists=/etc/krb5.keytab'
        line: ConditionPathExists=/etc/krb5_nfs_client.keytab
        backup: yes
      register: configure_rpc_gssd_unit_2

    - name: Run daemon-reload
      # command module used by purpose since systemd module does not set changed=true for daemon-reload
      command: systemctl daemon-reload
      notify: Restart rpc-gssd service
      when: configure_rpc_gssd_unit_1.changed
         or configure_rpc_gssd_unit_2.changed

# rpc-gssd must be started with GSS_USE_PROXY="yes"
- name: Adjust nfs-config service script
  lineinfile:
    path: /usr/lib/systemd/scripts/nfs-utils_env.sh
    line: "{{ item }}"
    insertbefore: '^\} > /run/sysconfig/nfs-utils'
    backup: yes
  register: adjust_nfs_config_script
  loop:
    - 'echo GSSDARGS=\"$RPCGSSDARGS\"'
    - 'echo GSS_USE_PROXY=\"$GSS_USE_PROXY\"'
  when: ansible_os_family == 'Debian'

- name: Configure NFS common variables
  lineinfile:
    path: "{{ nfs.config_file_path[ansible_os_family] }}"
    regexp: "^{{ item.name }}="
    line: "{{ item.name }}=\"{{ item.value }}\""
    backup: yes
  register: configure_nfs_env_vars
  loop:
    - name: GSS_USE_PROXY
      value: 'yes'
    - name: RPCGSSDARGS
      value: '-k /etc/krb5_nfs_client.keytab'

- name: Restart nfs-config service
  systemd:
    name: nfs-config
    state: restarted
  notify: Restart rpc-gssd service
  when: adjust_nfs_config_script.changed
     or configure_nfs_env_vars.changed

- name: Start gssproxy service
  systemd:
    name: gssproxy
    state: started
  notify: Restart rpc-gssd service

- name: Flush handlers to restart rpc-gssd service
  meta: flush_handlers

- name: Start rpc-gssd service
  systemd:
    name: rpc-gssd
    state: started

- name: Enable services
  systemd:
    name: "{{ item }}"
    enabled: yes
  loop:
    - gssproxy
    - rpc-gssd

- name: Mount NFS shares
  block:
    - name: Check if mount points exist
      stat:
        path: "{{ item.mount_point }}"
        get_attributes: no
        get_checksum: no
        get_mime: no
      register: mount_point_dir_stat
      loop: "{{ enabled_mounts }}"
      loop_control:
        label: "{{ item.mount_point }}"

    - name: Create mount point directories if don't exist
      file:
        path: "{{ item.mount_point }}"
        state: directory
        owner: "{{ admin_user.name }}"
        group: "{{ admin_user.name }}"
      when:
        - mount_point_dir_stat.results[ansible_loop.index0].stat.isdir is undefined
          or not mount_point_dir_stat.results[ansible_loop.index0].stat.isdir
      loop: "{{ enabled_mounts }}"
      loop_control:
        extended: yes
        label: "{{ item.mount_point }}"

    - name: Mount NFS shares
      mount:
        fstype: nfs
        opts: "{{ item.mount_options }}"
        state: mounted
        src: "{{ nfs_server }}:{{ item.export_point }}"
        path: "{{ item.mount_point }}"
      loop: "{{ enabled_mounts }}"
  vars:
    nfs_server: "{{ specification.nfs_server_host }}"
    enabled_mounts: >-
      {{ specification.mounts | selectattr('enabled', 'undefined') | list +
         specification.mounts | selectattr('enabled', 'defined')
                              | rejectattr("enabled", "equalto", False) | list }}
