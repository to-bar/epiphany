---
- name: ODFE | Create upgrade state file
  become: true
  file:
    path: "{{ opendistro_for_elasticsearch.upgrade_state_file_path }}"
    state: touch
    mode: u=rw,g=r,o=

- name: ODFE | Ensure elasticsearch service is running
  systemd:
    name: elasticsearch
    enabled: yes
    state: started
  register: elasticsearch_state

# TODO: Get all configurable values (such as host and ports) from /etc/elasticsearch/elasticsearch.yml

- name: ODFE | Wait for elasticsearch service to start up
  wait_for:
    port: "{{ es_transport_port }}"
    host: "{{ ansible_default_ipv4.address | default(ansible_all_ipv4_addresses[0]) }}"
    delay: 10
  when: elasticsearch_state.changed == true

- name: ODFE | Get Xmx value from /etc/elasticsearch/jvm.options
  command: grep -oP '(?<=^-Xmx)\d+[kKmMgG]?' /etc/elasticsearch/jvm.options
  register: grep_es_xmx
  changed_when: false

- name: ODFE | Set helper facts
  set_fact:
    elasticsearch_endpoint: >-
      https://{{ ansible_default_ipv4.address | default(ansible_all_ipv4_addresses[0]) }}:{{ es_http_port }}
  vars:
    uri_template: &uri
      client_cert: "{{ specification.api.auth.tls.client_cert if specification.api.auth.method == 'tls' else omit }}"
      client_key: "{{ specification.api.auth.tls.client_key if specification.api.auth.method == 'tls' else omit }}"
      url_username: "{{ specification.api.auth.basic.es_user if specification.api.auth.method == 'basic' else omit }}"
      url_password: "{{ specification.api.auth.basic.es_password if specification.api.auth.method == 'basic' else omit }}"
      validate_certs: false
      body_format: json

- name: ODFE | Disable shard allocation for the cluster
  uri:
    <<: *uri
    url: "{{ elasticsearch_endpoint }}/_cluster/settings"
    method: PUT
    body: '{"persistent":{"cluster.routing.allocation.enable": "primaries"}}'
  register: response_allocation_primaries
  until: response_allocation_primaries.json.acknowledged is defined and response_allocation_primaries.json.acknowledged == true
  retries: 10
  delay: 20

- name: ODFE | Perform a synced flush
  uri:
    <<: *uri
    url: "{{ elasticsearch_endpoint }}/_flush/synced"
    method: POST
    status_code: "200, 409"

- name: ODFE | Stop elasticsearch service
  systemd:
    name: elasticsearch
    state: stopped

- name: ODFE | Include Elasticsearch installation tasks
  include_role:
    name: opendistro_for_elasticsearch
    tasks_from: install-es.yml

- name: ODFE | Include Elasticsearch configuration tasks
  include_role:
    name: opendistro_for_elasticsearch
    tasks_from: configure-es.yml
  vars:
    context: upgrade
    jvm_options:
      xmx: "{{ grep_es_xmx.stdout_lines | last }}"

- name: ODFE | Include upgrade plugins tasks
  include_tasks: opendistro_for_elasticsearch/upgrade-plugins.yml

- name: ODFE | Restart elasticsearch service
  systemd:
    name: elasticsearch
    state: restarted
    daemon_reload: yes # opendistro-performance-analyzer provides opendistro-performance-analyzer.service
  when: install_opendistro_packages.changed

- name: ODFE | Wait for elasticsearch node to come back up
  wait_for:
    port: "{{ es_transport_port }}"
    host: "{{ ansible_default_ipv4.address | default(ansible_all_ipv4_addresses[0]) }}"
    delay: 10

- name: ODFE | Wait for elasticsearch http to come back up
  wait_for:
    port: "{{ es_http_port }}"
    host: "{{ ansible_default_ipv4.address | default(ansible_all_ipv4_addresses[0]) }}"
    delay: 5

- name: ODFE | Wait for 'yellow' or 'green' cluster health status
  uri:
    <<: *uri
    url: "{{ elasticsearch_endpoint }}/_cluster/health"
    method: GET
  register: cluster_health
  until: cluster_health.json.status is defined and cluster_health.json.status in ['yellow', 'green']
  retries: 10
  delay: 15

- name: ODFE | Enable shard allocation for the cluster
  uri:
    <<: *uri
    url: "{{ elasticsearch_endpoint }}/_cluster/settings"
    method: PUT
    body: '{"persistent":{"cluster.routing.allocation.enable": null}}'
  register: response
  until: response.json.acknowledged is defined and response.json.acknowledged == true
  retries: 10
  delay: 15

- name: ODFE | Wait for 'yellow' or 'green' cluster health status
  uri:
    <<: *uri
    url: "{{ elasticsearch_endpoint }}/_cluster/health"
    method: GET
    return_content: yes
  register: cluster_health
  until: cluster_health.json.status is defined and cluster_health.json.status in ['yellow', 'green']
  retries: 10
  delay: 15

- name: ODFE | Remove upgrade state file
  become: true
  file:
    path: "{{ opendistro_for_elasticsearch.upgrade_state_file_path }}"
    state: absent
