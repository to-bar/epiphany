---
# This file is meant to be also used by upgrade role
- name: Ensure snapshot folder exists
  file:
    path: "{{ specification.paths.repo }}/"
    state: directory
    owner: elasticsearch
    group: elasticsearch
    mode: u=rwx,go=

- name: Provide jvm configuration file
  template:
    backup: yes
    src: jvm.options.j2
    dest: /etc/elasticsearch/jvm.options
    owner: elasticsearch
    group: root
    mode: ug=rw,o=
  register: change_jvm_config
  vars:
    xmx: >-
      {{ jvm_options.xmx if (context is defined and context == 'upgrade') else
         specification.jvm_options.Xmx }}

- name: Provide Elasticsearch configuration file
  template:
    backup: yes
    src: elasticsearch.yml.j2
    dest: /etc/elasticsearch/elasticsearch.yml
    owner: elasticsearch
    group: root
    mode: ug=rw,o=
  register: change_config

- name: Restart elasticsearch service
  systemd:
    name: elasticsearch
    state: restarted
  when: change_config.changed
     or change_jvm_config.changed
     or install_elasticsearch_package.changed
     or (install_opendistro_packages is defined and install_opendistro_packages.changed)

- name: Enable and start elasticsearch service
  systemd:
    name: elasticsearch
    state: started
    enabled: yes

- name: Change default users
  when: not (context is defined and context == 'upgrade')
  block: 
    - name: Set helper facts
      set_fact:
        elasticsearch_endpoint: >-
          https://{{ ansible_default_ipv4.address }}:9200
      vars:
        uri_template: &uri
          client_cert: /etc/elasticsearch/kirk.pem
          client_key: /etc/elasticsearch/kirk-key.pem
          validate_certs: false
          body_format: json

    - name: Check if default admin user exists
      uri:
        <<: *uri
        url: "{{ elasticsearch_endpoint }}/_opendistro/_security/api/internalusers/admin"
        method: GET
        status_code: [200, 404]
      register: admin_check_response
      until: admin_check_response is success
      retries: 12
      delay: 5
      run_once: true

    - name: Set OpenDistro admin password
      uri:
        <<: *uri
        url: "{{ elasticsearch_endpoint }}/_opendistro/_security/api/internalusers/"
        method: PATCH
        status_code: [200]
        body:
          - op: "replace"
            path: "/admin"
            value:
              password: "{{ specification.admin_password }}"
              reserved: "true"
              backend_roles:
                - "admin"
              description: "Admin user"
      register: uri_response
      until: uri_response is success
      retries: 3
      delay: 5
      run_once: true
      when: admin_check_response.status == 200

    - name: Check if default kibanaserver user exists
      uri:
        <<: *uri
        url: "{{ elasticsearch_endpoint }}/_opendistro/_security/api/internalusers/kibanaserver"
        method: GET
        status_code: [200]
      register: kibanaserver_check_response
      until: kibanaserver_check_response is success
      retries: 12
      delay: 5
      run_once: true
      when: specification.kibanaserver_user_active

    - name: Set OpenDistro kibanaserver password
      uri:
        <<: *uri
        url: "{{ elasticsearch_endpoint }}/_opendistro/_security/api/internalusers/"
        method: PATCH
        status_code: [200]
        body:
          - op: "replace"
            path: "/kibanaserver"
            value:
              password: "{{ specification.kibanaserver_password }}"
              reserved: "true"
              description: "Kibana server user"
      register: uri_response
      until: uri_response is success
      retries: 15
      delay: 1
      run_once: true
      when: specification.kibanaserver_user_active
      
    - name: Check if default kibanaserver user exists
      uri:
        <<: *uri
        url: "{{ elasticsearch_endpoint }}/_opendistro/_security/api/internalusers/logstash"
        method: GET
        status_code: [200]
      register: logstash_check_response
      until: logstash_check_response is success
      retries: 60
      delay: 1
      run_once: true
      when: specification.logstash_user_active

    - name: Set OpenDistro logstash password
      uri:
        <<: *uri
        url: "{{ elasticsearch_endpoint }}/_opendistro/_security/api/internalusers/"
        method: PATCH
        status_code: [200]
        body:
          - op: "replace"
            path: "/logstash"
            value:
              password: "{{ specification.logstash_password }}"
              reserved: "true"
              backend_roles:
                - "logstash"
              description: "Logstash user"
      register: uri_response
      until: uri_response is success
      retries: 3
      delay: 5
      run_once: true
      when: specification.logstash_user_active

    - name: Remove OpenDistro demo users
      uri:
        <<: *uri
        url: "{{ elasticsearch_endpoint }}/_opendistro/_security/api/internalusers/{{ item }}"
        method: DELETE
        status_code: [200, 404]
      register: uri_response
      until: uri_response is success
      retries: 3
      delay: 5
      run_once: true
      loop: "{{ specification.demo_users_to_remove }}"
